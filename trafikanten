#! /usr/bin/perl -CSDAL

# Copyright (c) 2011 Tollef Fog Heen <tfheen@err.no>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use strict;
use warnings;
use JSON;
use LWP::Simple;
use POSIX qw(strftime);
use Data::Dumper;
use utf8;
use Term::ANSIColor;
use Config::File;

my $placesURI = "http://api-test.trafikanten.no/Place/FindMatchesOfType/%s?placeType=Stop";
my $getTravelAfterByStopsURI = "http://api-test.trafikanten.no/Travel/GetTravelsAdvanced?fromstops=%s&tostops=%s";

my ($from, $to);
my $conf;
my $conffile = $ENV{HOME} . "/.trafikanten";
if (-f $conffile) {
	$conf = Config::File::read_config_file($conffile);
}
if (scalar(@ARGV) == 1) {
	if (defined $conf and exists($conf->{DEFAULT_FROM})) {
		$from = $conf->{DEFAULT_FROM};
	} else {
		die "Not enough arguments";
	}
	$to = $ARGV[0];
} else {
	$from = $ARGV[0];
	$to = $ARGV[1];
}

my @fromplaces = map {$_->{ID}} @{decode_json(get(sprintf($placesURI, $from)))};
my @toplaces = map {$_->{ID}} @{decode_json(get(sprintf($placesURI, $to)))};

my $travels = decode_json(get(sprintf($getTravelAfterByStopsURI, 
				      join(",", @fromplaces),
				      join(",", @toplaces))));

sub format_date {
	my ($format, $date) = (@_);
	$date =~ /Date\((\d+)/;
	return strftime($format, localtime($1/1000));
}

foreach my $option (@{$travels}) {
	print(color('bold blue underline'),
	      format_date("%Y-%m-%d %H%M - ", $option->{DepartureTime}),
	      format_date("%H%M ", $option->{ArrivalTime}),
	      sprintf("(%d minutter)\n", (format_date("%s", $option->{ArrivalTime}) -
				 format_date("%s", $option->{DepartureTime})) / 60),
	      color('reset'));
	foreach my $stage (@{$option->{TravelStages}}) {
		if ($stage->{Destination} ne 'Gangledd') {
			printf("  [%s-%s] Linje %s fra %s mot %s til %s\n",
			       format_date("%H%M", $stage->{DepartureTime}),
			       format_date("%H%M", $stage->{ArrivalTime}),
			       colored($stage->{LineName}, 'bold'),
			       colored($stage->{DepartureStop}->{Name}, 'yellow'),
			       $stage->{Destination},
			       colored($stage->{ArrivalStop}->{Name},'yellow'));
		} else {
			printf("  [%s-%s] GÃ¥ fra %s til %s\n",
			       format_date("%H%M", $stage->{DepartureTime}),
			       format_date("%H%M", $stage->{ArrivalTime}),
			       $stage->{DepartureStop}->{Name},
			       $stage->{ArrivalStop}->{Name});

		}
	}
}


